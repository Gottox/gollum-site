#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

require 'optparse'
require 'rubygems'
require 'gollum-site'

help = <<HELP
Gollum Site is a static site generator for Gollum Wikis

Basic Command Line Usage:
  gollum-site [OPTIONS] [COMMAND]

        Available commands:

        generate      Generate a static site
        serve         Start a web server to view generated site

Options:
HELP

options = {
  'ref' => ( head = Grit::Repo.new('.').head ) ? head.name : 'master', # current branch
  'base_path' => '/',
  'output_path' => '_site',
  'port' => 8000,
  'default_layout' => true
}
opts = OptionParser.new do |opts|
  opts.banner = help

  opts.on("--ref [REF]", "Branch or commit to generate") do |ref|
    options['ref'] = ref
  end

  opts.on("--base_path [BASE_PATH]", "Prefix to apply to internal links") do |base_path|
    options['base_path'] = base_path
  end

  opts.on("--output_path [OUTPUT_PATH]", "Path to write generated site") do |output_path|
    options['output_path'] = output_path
  end

  opts.on("--port [PORT]", "Port to use when serving site (default 8000)") do |port|
    options['port'] = port
  end

  opts.on("--no_default_layout", "Don't include a default layout") do |default_layout|
    options['default_layout'] = !default_layout
  end

  opts.on_tail("--help", "Show this information") do
    puts opts
    exit
  end

  opts.on_tail("--version", "Display current version.") do
    require 'gollum-site/version'
    puts "Gollum Site " + Gollum::Site::VERSION
    exit 0
  end
end

opts.parse!

cmd = ARGV[0]

case cmd
when 'generate'
  wiki = Gollum::Wiki.new('.', {:base_path => options['base_path']})
  site = Gollum::Site.new(wiki, {
                            :output_path => options['output_path'],
                            :include_default_layout => options['default_layout']})
  site.generate(options['ref'])
when 'serve'
  require 'webrick'
  include WEBrick

  mime_types = WEBrick::HTTPUtils::DefaultMimeTypes
  mime_types.store 'js', 'application/javascript'

  s = HTTPServer.new(
                     :Port            => options['port'],
                     :DocumentRoot    => options['output_path'],
                     :MimeTypes       => mime_types,
                     :DirectoryIndex  => 'Home.html'
                     )

  t = Thread.new {
    s.start
  }

  trap("INT") { s.shutdown }
  t.join()
else
  puts opts
  exit
end
